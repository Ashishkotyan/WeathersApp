{"version":3,"sources":["img/bg.jpg","services/api.js","components/Information.jsx","components/Form.jsx","components/Weather.jsx","App.js","reportWebVitals.js","index.js"],"names":["getWeather","city","country","a","axios","get","data","useStyles","makeStyles","component","margin","container","display","row","padding","fontSize","letterSpacing","value","color","icon","marginRight","error","background","Information","classes","Box","className","Typography","name","sys","main","temp","humidity","Date","sunrise","toLocaleTimeString","sunset","weather","clouds","all","input","labelRoot","button","width","height","marginTop","Form","useState","setCity","setCountry","click","handleClick","setData","useEffect","then","response","weatherInfo","console","log","TextField","InputProps","onChange","e","handleCityChange","target","label","InputLabelProps","root","handleCountryChange","Button","variant","onClick","alignItems","leftContainer","backgroundImage","Image","backgroundSize","borderRadius","rightContainer","Weather","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fc5386ec.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/bg.9c811a51.jpg\";","import axios from 'axios';\r\n\r\nconst API_KEY = '8d2a110b6ad468ae1a0e459757cf659d';\r\nconst URL = 'http://api.openweathermap.org/data/2.5/weather';\r\n\r\n\r\nexport const getWeather = async(city, country) => {\r\n    const data = await axios.get(`${URL}?q=${city},${country}&appid=${API_KEY}&units=metric`)\r\n    return data;\r\n}","import { Box, makeStyles, Typography } from '@material-ui/core';\r\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\r\nimport SettingsBrightnessIcon from '@material-ui/icons/SettingsBrightness';\r\nimport OpacityIcon from '@material-ui/icons/Opacity';\r\nimport Brightness5Icon from '@material-ui/icons/Brightness5';\r\nimport Brightness6Icon from '@material-ui/icons/Brightness6';\r\nimport DehazeIcon from '@material-ui/icons/Dehaze';\r\nimport CloudIcon from '@material-ui/icons/Cloud';\r\n\r\nconst useStyles = makeStyles({\r\n    component: {\r\n        margin: '30px 60px'\r\n    },\r\n    container: {\r\n        display: 'flex',\r\n    },\r\n    row: {\r\n        padding: 10,\r\n        fontSize: 20,\r\n        letterSpacing: 2,\r\n    },\r\n    value: {\r\n        color: '#fff'\r\n    },\r\n    icon: {\r\n        color: 'darkred',\r\n        marginRight: 15\r\n    },\r\n    error: {\r\n        background: 'red',\r\n        color: '#fff',\r\n        margin: 50,\r\n        padding: 20\r\n    }\r\n})\r\n\r\nconst Information = ({ data, city, country }) => {\r\n    const classes = useStyles();\r\n\r\n    const getCloudsData = (value) => {\r\n        if(value === 0){\r\n            return 'Clear';\r\n        }else if(value > 1 && value < 100){\r\n            return 'Partially Cloudy';\r\n        }else{\r\n            return 'Cloudy';\r\n        }\r\n    }\r\n\r\n    return (\r\n        data && city && country ?\r\n            <Box className={classes.component}>\r\n                <Typography className={classes.row}><LocationOnIcon className={classes.icon}/>Location:  <Box className={classes.value} component=\"span\">{data.name}, {data.sys.country} </Box></Typography>\r\n                <Typography className={classes.row}><SettingsBrightnessIcon className={classes.icon} />Temperature:  <Box className={classes.value} component=\"span\">{data.main.temp}Â°C </Box></Typography>\r\n                <Typography className={classes.row}><OpacityIcon className={classes.icon} />Humidity:  <Box className={classes.value} component=\"span\">{data.main.humidity}% </Box></Typography>\r\n                <Typography className={classes.row}><Brightness5Icon className={classes.icon} />Sun Rise:  <Box className={classes.value} component=\"span\">{new Date(data.sys.sunrise * 1000).toLocaleTimeString()} </Box></Typography>\r\n                <Typography className={classes.row}><Brightness6Icon className={classes.icon} />Sun Set: <Box className={classes.value} component=\"span\">{new Date(data.sys.sunset * 1000).toLocaleTimeString()} </Box></Typography> \r\n                <Typography className={classes.row}><DehazeIcon className={classes.icon} />Condition:  <Box className={classes.value} component=\"span\">{data.weather[0].main} </Box></Typography>\r\n                <Typography className={classes.row}><CloudIcon className={classes.icon} />Clouds:  <Box className={classes.value} component=\"span\">{getCloudsData(data.clouds.all)} </Box></Typography>\r\n            </Box>\r\n        : !(city && country) ? <Typography className={classes.error}>Please Enter the values to check Weather</Typography> : ''\r\n    )\r\n}\r\n\r\nexport default Information;","import { useState, useEffect } from 'react';\r\nimport { Box, TextField, Button, makeStyles } from '@material-ui/core';\r\nimport { getWeather } from '../services/api';\r\nimport Information from './Information';\r\n\r\nconst useStyles = makeStyles({\r\n    component: {\r\n        padding: 10,\r\n        display: 'flex',\r\n        background: '#445A6F'\r\n    },\r\n    input: {\r\n        color: '#fff',\r\n        marginRight: 15 \r\n    },\r\n    labelRoot: {\r\n        fontSize: 15,\r\n        color: '#fff'\r\n    },\r\n    button: {\r\n        background: '#e67e22',\r\n        color: '#fff',\r\n        width: 150,\r\n        height: 40,\r\n        marginTop: 5\r\n    }\r\n})\r\n\r\nconst Form = () => {\r\n    const classes = useStyles();\r\n    const [ city, setCity ] = useState('');\r\n    const [ country, setCountry ] = useState('');\r\n    const [ click, handleClick ] = useState(false);\r\n    const [ data, setData ] = useState();\r\n\r\n    useEffect(() => {\r\n        const weatherInfo = async () => {\r\n            city && await getWeather(city, country).then(response => {\r\n                setData(response.data);\r\n            })\r\n        }\r\n        weatherInfo();\r\n        console.log(city, country);\r\n        console.log(data);\r\n        handleClick(false);\r\n    }, [click]);\r\n\r\n    const handleCityChange = (city) => {\r\n        setCity(city);\r\n    }\r\n\r\n    const handleCountryChange = (country) => {\r\n         setCountry(country);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Box className={classes.component}>\r\n                <TextField \r\n                    InputProps={{className: classes.input}} \r\n                    onChange={(e) => handleCityChange(e.target.value)} \r\n                    className={classes.input} \r\n                    label=\"City\" \r\n                    InputLabelProps={{\r\n                        classes: {root: classes.labelRoot}\r\n                    }}\r\n                />\r\n                <TextField \r\n                    InputProps={{className: classes.input}} \r\n                    onChange={(e) => handleCountryChange(e.target.value)} \r\n                    className={classes.input} \r\n                    label=\"Country\" \r\n                    InputLabelProps={{\r\n                        classes: {root: classes.labelRoot}\r\n                    }}\r\n                />\r\n                <Button \r\n                    variant=\"contained\" \r\n                    onClick={() => handleClick(true)}\r\n                    className={classes.button}\r\n                >Get Weather</Button>\r\n            </Box>\r\n            <Information data={data} city={city} country={country} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Form;","import { makeStyles, Box, Typography } from '@material-ui/core';\r\nimport Image from '../img/bg.jpg';\r\nimport Form from './Form';\r\n\r\nconst useStyles = makeStyles({\r\n    component: {\r\n        height: '100vh',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        width: '65%',\r\n        margin: '0 auto'\r\n    },\r\n    leftContainer: {\r\n        width: '27%',\r\n        height: '80%',\r\n        backgroundImage: `url(${Image})`,\r\n        backgroundSize: 'cover',\r\n        borderRadius: '20px 0 0 20px'\r\n    },\r\n    rightContainer: {\r\n        width: '73%',\r\n        height: '80%',\r\n        background: 'linear-gradient(to right, #e74c3c, #e67e22)',\r\n    }\r\n})\r\n\r\nconst Weather = () => {\r\n    const classes = useStyles();\r\n    return (\r\n        <Box className={classes.component}>\r\n            <Box className={classes.leftContainer}></Box>\r\n            <Box className={classes.rightContainer}>\r\n                <Form />\r\n            </Box>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default Weather;","import Weather from './components/Weather'\n\nfunction App() {\n  return (\n    <Weather/>\n    \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}